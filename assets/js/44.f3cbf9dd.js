(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{220:function(_,v,t){"use strict";t.r(v);var a=t(0),i=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"微服务和服务治理基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#微服务和服务治理基础"}},[_._v("#")]),_._v(" 微服务和服务治理基础")]),_._v(" "),t("p",[_._v("架构（"),t("code",[_._v("Architecture")]),_._v("）一词源于建筑领域，用于指规划、设计和建造建筑物的过程及产物；\n引入计算机领域后，软件架构就成为描述软件规划设计的专有名词")]),_._v(" "),t("p",[_._v("简言之，软件架构是有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计")]),_._v(" "),t("ul",[t("li",[_._v("程序架构风格")]),_._v(" "),t("li",[_._v("微服务架构")])]),_._v(" "),t("h2",{attrs:{id:"_1-程序架构风格"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序架构风格"}},[_._v("#")]),_._v(" 1.程序架构风格")]),_._v(" "),t("h3",{attrs:{id:"_1-架构的形式与特点："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-架构的形式与特点："}},[_._v("#")]),_._v(" 1.架构的形式与特点：")]),_._v(" "),t("ul",[t("li",[_._v("以文档和代码呈现：架构既包含设计过程，也包括设计的产物，可以是各类设计文档、设计图，也可 是一些技术验证代码、"),t("code",[_._v("Demo")]),_._v("或其它相关的程序；文档是设计的载体，而代码是系统功能实现的载体；")]),_._v(" "),t("li",[_._v("架构服务于业务：即架构的首要功能是服务于业务功能，因此，架构设计需要一定的前瞻性来容纳业务的变动；")]),_._v(" "),t("li",[_._v("架构影响团队的组织形式：业务的拆分方法和技术框架的选择必然会影响研发团队的组织形式，\n反过来，研发组织的结构和成熟度也会对最终所采取的技术架构产生重要的影响；")]),_._v(" "),t("li",[_._v("架构存在于每一个系统：每一个已经实现并运行的系统，必然是特定架构设计的载体；")]),_._v(" "),t("li",[_._v("每个架构都有特定的架构风格")]),_._v(" "),t("li",[_._v("架构需要不断地发展演进")])]),_._v(" "),t("p",[_._v("根据软件系统在运行期的表现风格和部署结构，大体可以将其粗略地划分为两类：")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("单体架构：整个系统的所有功能单元整体部署到同一进程（所有代码可以打包成一个或 多个文件）")]),_._v(" "),t("p",[_._v("进一步细分：简单单体模式、MVC模式、前后端分离模式、组件模式和类库模式等；")])]),_._v(" "),t("li",[t("p",[_._v("分布式架构：整个系统的功能单元分散到不同的进程，然后由多个进程共同提供不同的 业务能力；")]),_._v(" "),t("p",[_._v(" 面向服务的架构（"),t("code",[_._v("SOA")]),_._v("）  分布式服务架构（"),t("code",[_._v("DSA")]),_._v("）  微服务架构（"),t("code",[_._v("MSA")]),_._v("）")])])]),_._v(" "),t("h3",{attrs:{id:"_2-微服务架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-微服务架构"}},[_._v("#")]),_._v(" 2.微服务架构")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%80%BB%E8%BE%91%E6%9E%B6%E6%9E%84.png",alt:"微服务逻辑架构"}})]),_._v(" "),t("p",[_._v("最早出现于2011年的“微服务”在2014年由"),t("code",[_._v("MartinFowler")]),_._v("通过一篇著名的文章发扬光大；\n该文章可抽象出以下几个关键点：")]),_._v(" "),t("ul",[t("li",[_._v("由一些独立的服务共同组成应用系统")]),_._v(" "),t("li",[_._v("每个服务单独部署、独立运行在自己的进程中")]),_._v(" "),t("li",[_._v("每个服务都是独立的业务")]),_._v(" "),t("li",[_._v("分布式管理")]),_._v(" "),t("li",[_._v("遵循低耦合、高内聚的原则")])]),_._v(" "),t("h3",{attrs:{id:"_3-微服务架构的好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-微服务架构的好处"}},[_._v("#")]),_._v(" 3.微服务架构的好处")]),_._v(" "),t("ul",[t("li",[_._v("使大型的复杂应用程序可以持续交付和持续部署")]),_._v(" "),t("li",[_._v("每个服务都相对较小且容易维护")]),_._v(" "),t("li",[_._v("服务可以独立部署")]),_._v(" "),t("li",[_._v("服务可以独立扩展")]),_._v(" "),t("li",[_._v("微服务架构可以实现团队的自治")]),_._v(" "),t("li",[_._v("更容易实验和采纳新技术")]),_._v(" "),t("li",[_._v("更好的容错机制")])]),_._v(" "),t("h3",{attrs:{id:"_3-微服务架构的弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-微服务架构的弊端"}},[_._v("#")]),_._v(" 3.微服务架构的弊端")]),_._v(" "),t("ul",[t("li",[_._v("服务的拆分是一项挑战")]),_._v(" "),t("li",[_._v("分布式系统带来的各种复杂性，使开发、测试和部署变得更困难\n"),t("ul",[t("li",[_._v("跨服务的事务可能需要Saga来维护服务间的数据一致性，同时还要使用API组合或CORS视 图实现跨服务查询")]),_._v(" "),t("li",[_._v("依赖高度自动化的基础设施\n"),t("ul",[t("li",[_._v("自动化部署工具，例如Netflix Spinnaker")]),_._v(" "),t("li",[_._v("产品化的PaaS平台，例如OpenShift")]),_._v(" "),t("li",[_._v("Docker容器编排平台，例如Kubernetes或Docker Swarm")])])])])]),_._v(" "),t("li",[_._v("当部署跨越多个服务的功能时需要谨慎地协调更多团队")]),_._v(" "),t("li",[_._v("开发者需要思考到底应该在应用的什么阶段使用微服务构架")])])])}),[],!1,null,null,null);v.default=i.exports}}]);