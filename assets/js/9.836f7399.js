(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{232:function(e,t,r){"use strict";r.r(t);var a=r(0),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"kubernetes基础"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes基础"}},[e._v("#")]),e._v(" Kubernetes基础")]),e._v(" "),r("p",[e._v("随着业务需求的快速发展，“动态”特性仿佛就成了技术解决业务刚需的必要条件，3年前的spring cloud通过注册中心eureka解决了服务动态上下线、注册和续约的问题，近一年，kubernetes通过其强大的基础对象和平台的动态特性，从运维侧对产品的稳定性和扩展性保驾护航！")]),e._v(" "),r("ul",[r("li",[e._v("架构图")]),e._v(" "),r("li",[e._v("流程概述")]),e._v(" "),r("li",[e._v("参考文档")]),e._v(" "),r("li",[e._v("附录-示例源码")])]),e._v(" "),r("h2",{attrs:{id:"_1-架构图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-架构图"}},[e._v("#")]),e._v(" 1.架构图")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/Docker/Kubernetes-Components-1.png",alt:"架构图-1"}}),e._v("\n首先引入大家眼帘的是一张关于Kubernetes的组件架构图，这是我从官网摘录下来的。\n如图，我们可以粗略观察发现，Kubernetes分为Master端和Nodes端，以及一个外接的cloud端。\n他们工作逻辑和内部组件，你可以参考下面的文字描述：")]),e._v(" "),r("h3",{attrs:{id:"_1-master节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-master节点"}},[e._v("#")]),e._v(" 1.Master节点")]),e._v(" "),r("p",[e._v("又称为控制平面：control plane")]),e._v(" "),r("p",[e._v("包括kube-apiserver、kube-scheduler、kube-controller-manager和etcd四个组件。")]),e._v(" "),r("div",{staticClass:"language-text extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("kube-apiserver：\n    是一个将Kubernetes控制平面中的API暴露出来的API服务，这服务是Kubernetes控制平面的前端。\n    用户可以运行多个kube-apiserver组件的实例，用于平衡实例的请求流量。\n    \nkube-scheduler：\n    用于watch监听apiserver的资源变动（增删改查），并调度合适的后端node节点来创建Pod资源。\n    \n\nkube-controller-manager：\n    每个控制器都是独立的二进制进程，包括：Node Controller、Replication Controller、Endpoints Controller和Service Account & Token Controllers。\n    \netcd：\n    高可用、KV结构的kubernetes的后端数据存储组件。\n    备份方案：https://kubernetes.io/docs/tasks/administer-cluster/configure-upgrade-etcd/#backing-up-an-etcd-cluster\n    官方文档：https://etcd.io/docs/v3.4.0/\n    \ncloud-controller-manager：\n    是kubernetes与云厂商提供的服务能力对接的关键组件。又称kubernetes cloudprovider。\n    阿里相关文档：https://yq.aliyun.com/articles/608575?spm=a2c4e.11153940.0.0.1dd819edqvfK0K\n")])])]),r("h3",{attrs:{id:"_2-node节点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-node节点"}},[e._v("#")]),e._v(" 2.Node节点")]),e._v(" "),r("p",[e._v("又称为数据平面：data plane")]),e._v(" "),r("pre",[r("code",[e._v("包括kubelet、kube-proxy和Container Runtime三个组件。\n")])]),e._v(" "),r("div",{staticClass:"language-text extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("kubelet:\n    运行在集群每个节点的客户端，需要确保相关容器运行在pod中；\n    通过PodSpecs标签，描述容器的运行状态；\n    最后，kubelet不管理，没有通过kubernetes创建的容器。\n    \nkube-proxy：\n    是一个运行在集群每个节点的网络代理组件。\n    \nContainer Runtime：\n    支持运行容器底层环境的软件；\n    支持： Docker, containerd, cri-o, rktlet and any implementation of the Kubernetes CRI (Container Runtime Interface)。\n    \n")])])]),r("h3",{attrs:{id:"_3-cloud端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-cloud端"}},[e._v("#")]),e._v(" 3.cloud端")]),e._v(" "),r("div",{staticClass:"language-text extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("cloud:\n    作为集群外部的附加能力，通过于cloud-controller-manager组件对接，扩展kuberntes集群于云上动态扩展的特性\n")])])]),r("h3",{attrs:{id:"_4-addons-附加组件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-addons-附加组件"}},[e._v("#")]),e._v(" 4.Addons(附加组件)")]),e._v(" "),r("pre",[r("code",[e._v("使用Kubernetes resources (DaemonSet, Deployment, etc)增加集群功能；\n其中附加组件的namespace属于kube-system。  \n可用Addons文档：https://kubernetes.io/docs/concepts/cluster-administration/addons/\n")])]),e._v(" "),r("div",{staticClass:"language-text extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("DNS：\n    将Service资源的A记录，实时且自动的添加进来。\nWeb UI (Dashboard)、Container Resource Monitoring和Cluster-level Logging\n")])])]),r("h2",{attrs:{id:"_2-流程概述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-流程概述"}},[e._v("#")]),e._v(" 2.流程概述")]),e._v(" "),r("p",[e._v("Master：")]),e._v(" "),r("pre",[r("code",[e._v("用户通过（API、WebUI、CLI）向APIserver发送请求，Scheduler组件watch APIserver的资源变动，同时从Node中选取最合适的Node节点开始调度，并把结果保存到Etcd中。\n")])]),e._v(" "),r("p",[e._v("Node：")]),e._v(" "),r("pre",[r("code",[e._v("kubelet也会watch APIserver的资源变动，并在符合的Node上，会通过kuberlet调用相关的docker引擎进行后续构建操作。\n")])]),e._v(" "),r("h2",{attrs:{id:"_3-参考文档"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-参考文档"}},[e._v("#")]),e._v(" 3.参考文档")]),e._v(" "),r("p",[e._v("官网：https://kubernetes.io")]),e._v(" "),r("h2",{attrs:{id:"_4-附录-示例源码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-附录-示例源码"}},[e._v("#")]),e._v(" 4.附录-示例源码")]),e._v(" "),r("p",[e._v("《Kubernetes进阶实战》一书中的配置清单示例源码：")]),e._v(" "),r("p",[e._v("https://github.com/iKubernetes/Kubernetes_Advanced_Practical")])])}),[],!1,null,null,null);t.default=s.exports}}]);