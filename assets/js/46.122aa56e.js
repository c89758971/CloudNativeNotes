(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{219:function(s,t,r){"use strict";r.r(t);var a=r(0),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h1",{attrs:{id:"envoy部署类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#envoy部署类型"}},[s._v("#")]),s._v(" Envoy部署类型")]),s._v(" "),r("p",[s._v("Envoy通常用于以容器编排系统为底层环境的服务网格中，并以sidecar的形式与主程序容器运行为单个Pod；\n非编排系统环境中测试时，可以将主程序与Envoy运行于同一容器，或手动组织主程序容器与Envoy容器共享同一网络名称空间")]),s._v(" "),r("ul",[r("li",[s._v("部署类型")]),s._v(" "),r("li",[s._v("部署类型：仅服务间")]),s._v(" "),r("li",[s._v("部署类型：仅服务间外加前端代理")]),s._v(" "),r("li",[s._v("部署类型：双向代理")])]),s._v(" "),r("h2",{attrs:{id:"_1-部署类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-部署类型"}},[s._v("#")]),s._v(" 1.部署类型")]),s._v(" "),r("p",[r("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/deploymenttypes.png",alt:"部署类型"}})]),s._v(" "),r("p",[s._v("图中展示了"),r("code",[s._v("Envoy")]),s._v("常见的部署类型，其中：")]),s._v(" "),r("div",{staticClass:"language-text extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[s._v("Front Proxy:\n    用于接受南北流量，并将流量代理至服务网格中的Ingress Listener\n    \nIngress Listener：\n    以SideCar模式运行于pod中，监听pod中的本地地址，作为服务端接收网络请求，并将请求反向代理至pod中的微服务server上\n    \nEgress Listener：\n    以SideCar模式运行于pod中，监听pod中的本地地址，作为客户端，接收pod请求，并以正想代理的模式，向外部发送请求。\n    注意：外部请求可以是集群内的东西网络，也可以是集群外的服务器（组）\n         \n")])])]),r("h2",{attrs:{id:"_2-部署类型：仅服务间"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-部署类型：仅服务间"}},[s._v("#")]),s._v(" 2.部署类型：仅服务间")]),s._v(" "),r("p",[s._v("仅服务间的部署类型主要解决envoy中东西流量的情况，主要分为Ingress和Egress")]),s._v(" "),r("h3",{attrs:{id:"_1-ingress"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-ingress"}},[s._v("#")]),s._v(" 1.Ingress")]),s._v(" "),r("p",[r("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/ingress.png",alt:"Ingress"}})]),s._v(" "),r("h3",{attrs:{id:"_2-egress"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-egress"}},[s._v("#")]),s._v(" 2.Egress")]),s._v(" "),r("p",[r("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/Egress.png",alt:"Egress"}})]),s._v(" "),r("p",[s._v("注意：\n业务本身并不直接向外部发送请求，他并不关心集群外的网络拓扑情况，而是直接将请求发送至"),r("code",[s._v("Sidecar")]),s._v("模式的Egress组件")]),s._v(" "),r("h2",{attrs:{id:"_3-部署类型：仅服务间外加前端代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-部署类型：仅服务间外加前端代理"}},[s._v("#")]),s._v(" 3.部署类型：仅服务间外加前端代理")]),s._v(" "),r("p",[r("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/frontproxy.png",alt:"frontproxy"}}),s._v("\n上面已经提到过，最外部增加"),r("code",[s._v("frontproxy")]),s._v("，用于解决集群南北流量问题")]),s._v(" "),r("h2",{attrs:{id:"_4-部署类型：双向代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-部署类型：双向代理"}},[s._v("#")]),s._v(" 4.部署类型：双向代理")]),s._v(" "),r("p",[r("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/doubleproxy.png",alt:"doubleproxy"}})]),s._v(" "),r("p",[s._v("双向代理尽可能接近用户地终止TLS和客户端连接（TLS握手的更短往返时间，更小几率的数据包丢失等）会更高效。")])])}),[],!1,null,null,null);t.default=e.exports}}]);