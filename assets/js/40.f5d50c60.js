(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{223:function(e,s,a){"use strict";a.r(s);var t=a(0),v=Object(t.a)({},(function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"service-mesh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#service-mesh"}},[e._v("#")]),e._v(" Service Mesh")]),e._v(" "),a("p",[e._v("service mesh是用于处理服务与服务之间通信的专用基础设施层。\n它负责在包含现代化、云原生应用且拓扑复杂的服务之间可靠地传递请求")]),e._v(" "),a("ul",[a("li",[e._v("技术采用生命周期")]),e._v(" "),a("li",[e._v("Service Mesh现状")]),e._v(" "),a("li",[e._v("服务网格")]),e._v(" "),a("li",[e._v("数据平面与控制平面")]),e._v(" "),a("li",[e._v("服务网格部署模式")])]),e._v(" "),a("h2",{attrs:{id:"_1-技术采用生命周期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-技术采用生命周期"}},[e._v("#")]),e._v(" 1.技术采用生命周期")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/%E6%8A%80%E6%9C%AF%E9%87%87%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png",alt:"技术采用生命周期"}})]),e._v(" "),a("h2",{attrs:{id:"_2-service-mesh现状"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-service-mesh现状"}},[e._v("#")]),e._v(" 2.Service Mesh现状")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/infoQ.png",alt:"ServiceMesh现状"}})]),e._v(" "),a("p",[e._v("我们可以看到"),a("code",[e._v("Service Mesh")]),e._v("（服务网格）正处于第二阶段：高瞻远瞩者，所以对于投产的可用性，我们需要辩证去看。")]),e._v(" "),a("p",[e._v("同时，我们也可以发现"),a("code",[e._v("k8s")]),e._v("已经进入第三个阶段：实用主义者。")]),e._v(" "),a("p",[e._v("最后，容器这一概念，也成功的被人们所接受，且进入了第四个阶段：保守派。")]),e._v(" "),a("h2",{attrs:{id:"_3-服务网格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务网格"}},[e._v("#")]),e._v(" 3.服务网格")]),e._v(" "),a("p",[e._v("概念源于"),a("code",[e._v("Buoyant")]),e._v("公司的"),a("code",[e._v("CEO Willian Morgan")]),e._v("的文章“What's a service mesh? And do I need one?”；\n是指专注于处理服务间通信的基础设施，它负责在现代云原生应用组成的复杂拓扑中可靠地传递请求；")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("治理模式：除了处理业务逻辑的相关功能外，每个微服务还必须实现此前单体应用模型 中用于网络间通信的基础功能，甚至还包括分布式应用程序之间的通信环境中应该实现 的其它网络功能，例如熔断、限流、应用跟踪、指标采集、服务发现和负载均衡等")])]),e._v(" "),a("li",[a("p",[e._v("实现模型经过演进三代：内嵌于应用程序、"),a("code",[e._v("SDK")]),e._v("和"),a("code",[e._v("Sidecar")])])])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://github-aaron89.oss-cn-beijing.aliyuncs.com/istio/sidecar.png",alt:"Sidecar"}}),e._v("\n新一代的解决方案：让服务集中解 决业务逻辑的问题，网络相关的功能则与业务逻辑剥离，并封装为独立的运行单元并作为服务的反向透明代理，\n从而不再与业务紧密关联")]),e._v(" "),a("p",[e._v("换句话说，微服务的业务程序独立 运行，而网络功能则以独立的代理 层工作于客户端与服务之间，专门为代理的服务提供熔断、限流、追踪、指标采集和服务发现等功能； 而这些由各服务的专用代理层联合组成的服务通信网络则称之为服务网格（"),a("code",[e._v("Service Mesh")]),e._v("）")]),e._v(" "),a("h2",{attrs:{id:"_4-数据平面与控制平面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据平面与控制平面"}},[e._v("#")]),e._v(" 4.数据平面与控制平面")]),e._v(" "),a("p",[e._v("数据平面：")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("触及系统中的每个数据包或请求，负责服务发现、健康检查、路由、负载均 衡、身份验证/授权和可观测性等\n\n")])])]),a("p",[e._v("控制平面：")]),e._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("为网格中的所有正在运行的数据平面提供策略和配置，从而将所有数据平面\n联合构建为分布式系统，它不接触系统中的任何数据包或请求；\n")])])]),a("h2",{attrs:{id:"_5-服务网格部署模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-服务网格部署模式"}},[e._v("#")]),e._v(" 5.服务网格部署模式")]),e._v(" "),a("h3",{attrs:{id:"_1-主机共享代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-主机共享代理"}},[e._v("#")]),e._v(" 1.主机共享代理")]),e._v(" "),a("ul",[a("li",[e._v("适用于同一主机上存在许多容器的场景，并且还可利用连接池来提高吞吐量")]),e._v(" "),a("li",[e._v("但一个代理进程故障将终止其所在主机上的整个容器队列，受影响的不仅仅是单个服务")]),e._v(" "),a("li",[e._v("实现方式中，常见的是运行为Kubernetes之上的DaemonSet")])]),e._v(" "),a("h3",{attrs:{id:"_2-sidecar容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-sidecar容器"}},[e._v("#")]),e._v(" 2.sidecar容器")]),e._v(" "),a("ul",[a("li",[e._v("代理进程注入每个Pod定义以与主容器一同运行")]),e._v(" "),a("li",[e._v("Sidecar进程应该尽可能轻量且功能完善")]),e._v(" "),a("li",[e._v("实现方案：Linkerd、Envoy和Conduit")])])])}),[],!1,null,null,null);s.default=v.exports}}]);